// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: 0004_pre_go_acc_user_two_factor_9999.sql

package database

import (
	"context"
	"database/sql"
)

const addOrUpdateEmail = `-- name: AddOrUpdateEmail :exec
INSERT INTO pre_go_acc_user_two_factor_9999 (user_id, two_factor_auth_email, two_factor_is_active)
VALUES (?, ?, TRUE)
ON DUPLICATE KEY UPDATE
    two_factor_auth_email = ?,
    two_factor_updated_at = NOW()
`

type AddOrUpdateEmailParams struct {
	UserID               uint32
	TwoFactorAuthEmail   sql.NullString
	TwoFactorAuthEmail_2 sql.NullString
}

func (q *Queries) AddOrUpdateEmail(ctx context.Context, arg AddOrUpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, addOrUpdateEmail, arg.UserID, arg.TwoFactorAuthEmail, arg.TwoFactorAuthEmail_2)
	return err
}

const addOrUpdatePhoneNumber = `-- name: AddOrUpdatePhoneNumber :exec
INSERT INTO pre_go_acc_user_two_factor_9999 (user_id, two_factor_auth_phone, two_factor_is_active)
VALUES (?, ?, TRUE)
ON DUPLICATE KEY UPDATE
    two_factor_auth_phone = ?,
    two_factor_updated_at = NOW()
`

type AddOrUpdatePhoneNumberParams struct {
	UserID               uint32
	TwoFactorAuthPhone   sql.NullString
	TwoFactorAuthPhone_2 sql.NullString
}

func (q *Queries) AddOrUpdatePhoneNumber(ctx context.Context, arg AddOrUpdatePhoneNumberParams) error {
	_, err := q.db.ExecContext(ctx, addOrUpdatePhoneNumber, arg.UserID, arg.TwoFactorAuthPhone, arg.TwoFactorAuthPhone_2)
	return err
}

const countActiveTwoFactorMethods = `-- name: CountActiveTwoFactorMethods :one
SELECT COUNT(*)
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = ? AND two_factor_is_active = TRUE
`

func (q *Queries) CountActiveTwoFactorMethods(ctx context.Context, userID uint32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countActiveTwoFactorMethods, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTwoFactorTypeEmail = `-- name: CreateTwoFactorTypeEmail :exec
INSERT INTO pre_go_acc_user_two_factor_9999 (user_id, two_factor_auth_type, two_factor_auth_email, two_factor_auth_secret, two_factor_is_active, two_factor_created_at, two_factor_updated_at)
VALUES (?, ?, ?, 'OTP', FALSE, NOW(), NOW())
`

type CreateTwoFactorTypeEmailParams struct {
	UserID             uint32
	TwoFactorAuthType  PreGoAccUserTwoFactor9999TwoFactorAuthType
	TwoFactorAuthEmail sql.NullString
}

func (q *Queries) CreateTwoFactorTypeEmail(ctx context.Context, arg CreateTwoFactorTypeEmailParams) error {
	_, err := q.db.ExecContext(ctx, createTwoFactorTypeEmail, arg.UserID, arg.TwoFactorAuthType, arg.TwoFactorAuthEmail)
	return err
}

const disableTwoFactor = `-- name: DisableTwoFactor :exec
UPDATE pre_go_acc_user_two_factor_9999
SET two_factor_is_active = FALSE,
    two_factor_updated_at = NOW()
WHERE user_id = ? AND two_factor_auth_type = ?
`

type DisableTwoFactorParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
}

func (q *Queries) DisableTwoFactor(ctx context.Context, arg DisableTwoFactorParams) error {
	_, err := q.db.ExecContext(ctx, disableTwoFactor, arg.UserID, arg.TwoFactorAuthType)
	return err
}

const getTwoFactorMethodByID = `-- name: GetTwoFactorMethodByID :one
SELECT two_factor_id, user_id, two_factor_auth_type, two_factor_auth_secret,
    two_factor_auth_phone, two_factor_auth_email,
    two_factor_is_active, two_factor_created_at, two_factor_updated_at
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = ? AND two_factor_auth_type = ?
`

type GetTwoFactorMethodByIDParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
}

func (q *Queries) GetTwoFactorMethodByID(ctx context.Context, arg GetTwoFactorMethodByIDParams) (PreGoAccUserTwoFactor9999, error) {
	row := q.db.QueryRowContext(ctx, getTwoFactorMethodByID, arg.UserID, arg.TwoFactorAuthType)
	var i PreGoAccUserTwoFactor9999
	err := row.Scan(
		&i.TwoFactorID,
		&i.UserID,
		&i.TwoFactorAuthType,
		&i.TwoFactorAuthSecret,
		&i.TwoFactorAuthPhone,
		&i.TwoFactorAuthEmail,
		&i.TwoFactorIsActive,
		&i.TwoFactorCreatedAt,
		&i.TwoFactorUpdatedAt,
	)
	return i, err
}

const getTwoFactorStatus = `-- name: GetTwoFactorStatus :one
SELECT two_factor_is_active
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = ? AND two_factor_auth_type = ?
`

type GetTwoFactorStatusParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
}

func (q *Queries) GetTwoFactorStatus(ctx context.Context, arg GetTwoFactorStatusParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, getTwoFactorStatus, arg.UserID, arg.TwoFactorAuthType)
	var two_factor_is_active bool
	err := row.Scan(&two_factor_is_active)
	return two_factor_is_active, err
}

const getUserTwoFactorMethods = `-- name: GetUserTwoFactorMethods :many
SELECT two_factor_id, two_factor_auth_type, two_factor_auth_secret,
    two_factor_auth_phone, two_factor_auth_email,
    two_factor_is_active, two_factor_created_at, two_factor_updated_at
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = ?
`

type GetUserTwoFactorMethodsRow struct {
	TwoFactorID         uint32
	TwoFactorAuthType   PreGoAccUserTwoFactor9999TwoFactorAuthType
	TwoFactorAuthSecret string
	TwoFactorAuthPhone  sql.NullString
	TwoFactorAuthEmail  sql.NullString
	TwoFactorIsActive   bool
	TwoFactorCreatedAt  sql.NullTime
	TwoFactorUpdatedAt  sql.NullTime
}

func (q *Queries) GetUserTwoFactorMethods(ctx context.Context, userID uint32) ([]GetUserTwoFactorMethodsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserTwoFactorMethods, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserTwoFactorMethodsRow
	for rows.Next() {
		var i GetUserTwoFactorMethodsRow
		if err := rows.Scan(
			&i.TwoFactorID,
			&i.TwoFactorAuthType,
			&i.TwoFactorAuthSecret,
			&i.TwoFactorAuthPhone,
			&i.TwoFactorAuthEmail,
			&i.TwoFactorIsActive,
			&i.TwoFactorCreatedAt,
			&i.TwoFactorUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isTwoFactorEnable = `-- name: IsTwoFactorEnable :one
SELECT COUNT(*)
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = ? AND two_factor_is_active = TRUE
`

func (q *Queries) IsTwoFactorEnable(ctx context.Context, userID uint32) (int64, error) {
	row := q.db.QueryRowContext(ctx, isTwoFactorEnable, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const reactivateTwoFactor = `-- name: ReactivateTwoFactor :exec
UPDATE pre_go_acc_user_two_factor_9999
SET two_factor_is_active = TRUE,
    two_factor_updated_at = NOW()
WHERE user_id = ? AND two_factor_auth_type = ?
`

type ReactivateTwoFactorParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
}

func (q *Queries) ReactivateTwoFactor(ctx context.Context, arg ReactivateTwoFactorParams) error {
	_, err := q.db.ExecContext(ctx, reactivateTwoFactor, arg.UserID, arg.TwoFactorAuthType)
	return err
}

const removeTwoFactor = `-- name: RemoveTwoFactor :exec
DELETE FROM pre_go_acc_user_two_factor_9999
WHERE user_id = ? AND two_factor_auth_type = ?
`

type RemoveTwoFactorParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
}

func (q *Queries) RemoveTwoFactor(ctx context.Context, arg RemoveTwoFactorParams) error {
	_, err := q.db.ExecContext(ctx, removeTwoFactor, arg.UserID, arg.TwoFactorAuthType)
	return err
}

const updateTwoFactorStatus = `-- name: UpdateTwoFactorStatus :exec
UPDATE pre_go_acc_user_two_factor_9999
SET two_factor_is_active = TRUE, two_factor_updated_at = NOW()
WHERE user_id = ? AND two_factor_auth_type = ? AND two_factor_is_active = FALSE
`

type UpdateTwoFactorStatusParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
}

func (q *Queries) UpdateTwoFactorStatus(ctx context.Context, arg UpdateTwoFactorStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTwoFactorStatus, arg.UserID, arg.TwoFactorAuthType)
	return err
}

const verifyTwoFactor = `-- name: VerifyTwoFactor :one
SELECT COUNT(*)
FROM pre_go_acc_user_two_factor_9999
WHERE user_id = ? AND two_factor_auth_type = ? AND two_factor_is_active = TRUE
`

type VerifyTwoFactorParams struct {
	UserID            uint32
	TwoFactorAuthType PreGoAccUserTwoFactor9999TwoFactorAuthType
}

func (q *Queries) VerifyTwoFactor(ctx context.Context, arg VerifyTwoFactorParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, verifyTwoFactor, arg.UserID, arg.TwoFactorAuthType)
	var count int64
	err := row.Scan(&count)
	return count, err
}
